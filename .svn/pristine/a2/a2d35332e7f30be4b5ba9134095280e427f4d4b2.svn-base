package kr.co.nao.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class StatisticsDAO extends CommonDAO {

	public ArrayList<Map<String, Object>> getStatisticsList(String id) {
		ArrayList<Map<String, Object>> list = new ArrayList<Map<String, Object>>();

		String sql = 
			"		select * from tb_schedule "
			+ "	where		isDel = 'N' "
			+ "	and				id = ? ";
//			+ "	order by schedule_date desc, schedule_start_time desc "
//			+ "	limit			?, 10 ";
		
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			con = ds.getConnection();
			stmt = con.prepareStatement(sql);
			stmt.setString(1, id);
			
			rs = stmt.executeQuery();
			
			while(rs.next()) {
				Map<String, Object> ad = new HashMap<String, Object>();
//				ad.put("num", 							rs.getInt("num"));
//				ad.put("schedule_date", 			rs.getDate("schedule_date"));
//				ad.put("schedule_start_time",	rs.getInt("schedule_start_time"));
//				ad.put("machine_num", 			rs.getString("machine_num"));
//				ad.put("contents_num", 			rs.getInt("contents_num"));
				
				list.add(ad);
			}
			
		} catch(Exception e) {
			e.printStackTrace();
		
		} finally {
			close(rs);
			close(stmt);
			close(con);
		}
		
		return list;
	}
	
	/**
	 * 일일 통계 리스트 및 통계 그래프 
	 * 
	 * @author	이영상
	 * @since		2020.08.19
	 * @version	1.0
	 * 
	 * <pre>
	 * << 개정이력 >>
	 * ------------------------------------------------------
	 * 수정일				수정자				수정내용
	 * ------------------------------------------------------
	 * 08.19			이영상				최초생성
	 */
	
	public ArrayList<Map<String, Object>> getStatisticsTestList(String id) 
	{
		ArrayList<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		
		StringBuffer sb = new StringBuffer();
		
		sb.append("SELECT															\n");
		sb.append("				A.ST_CONT_NUM										\n");
		sb.append("			   ,A.ST_MAC_NUM										\n");
		sb.append("			   ,A.ST_MONTH											\n");
		sb.append("			   ,DATE_FORMAT(A.ST_DAY, '%Y-%m-%d') AS ST_DAY			\n");
		sb.append("			   ,A.ST_HOUR											\n");
		sb.append("			   ,A.ST_NUM_OF_ADS										\n");
		sb.append("			   ,A.ST_SP_YN											\n");
		sb.append("			   ,B.contents_title									\n");
		sb.append("			   ,D.advertiser_name									\n");
		sb.append("			   ,F.id												\n");
		sb.append("  FROM															\n");
		sb.append("  	  tb_statistics A 											\n");
		sb.append("  	 ,tb_contents 	B 											\n");
		sb.append("  	 ,tb_machine 	C 											\n");
		sb.append("  	 ,tb_advertiser D											\n");
		sb.append("  	 ,tb_member     F 											\n");
		sb.append( "WHERE 															\n");
		sb.append("  	  A.ST_CONT_NUM = B.contents_num							\n");
		sb.append("  AND  A.ST_MAC_NUM  = C.machine_num								\n");
		sb.append("  AND  B.advertiser_num = D.advertiser_num						\n");
		sb.append("  AND  B.member_id = F.id										\n");
		sb.append("  AND  C.partner = F.id											\n");
		
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try 
		{
			con = ds.getConnection();
			stmt = con.prepareStatement(sb.toString());
//			stmt.setString(1, id);
			System.out.println("getStatisticsTestList: \n"+sb.toString());
			
			rs = stmt.executeQuery();
			
			while(rs.next()) 
			{
				Map<String, Object> ad = new HashMap<String, Object>();
				ad.put("CONT_NUM", 					rs.getInt("ST_CONT_NUM"));
				ad.put("MAC_NUM", 					rs.getString("ST_MAC_NUM"));
				ad.put("MONTH",						rs.getInt("ST_MONTH"));
				ad.put("DAY", 						rs.getString("ST_DAY"));
				ad.put("HOUR", 						rs.getString("ST_HOUR"));
				ad.put("ADS_CNT", 					rs.getInt("ST_NUM_OF_ADS"));
				ad.put("SP_YN", 					rs.getString("ST_SP_YN"));
				ad.put("C_TITLE", 					rs.getString("contents_title"));
				ad.put("ADT_NM", 					rs.getString("advertiser_name"));
				ad.put("ID", 						rs.getString("id"));
				
				list.add(ad);	
			}
			
		} catch(Exception e) {
			e.printStackTrace();
		
		} finally {
			close(rs);
			close(stmt);
			close(con);
		}
		
		return list;
	}
	
	/**
	 * 일일 통계 리스트 및 통계 그래프  ajax data
	 * 
	 * @author	이영상
	 * @since		2020.08.19
	 * @version	1.0
	 * 
	 * <pre>
	 * << 개정이력 >>
	 * ------------------------------------------------------
	 * 수정일				수정자				수정내용
	 * ------------------------------------------------------
	 * 08.19			이영상				최초생성
	 */
	
	public JSONObject getStatisticsDayListJson(String id) 
	{
		ArrayList<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		
		JSONObject json1 = new JSONObject();
		JSONObject result = new JSONObject();
		
		JSONArray bodyArray = new JSONArray();
		StringBuffer sb = new StringBuffer();
		
		int cnt = 0;
		
		sb.append("SELECT															\n");
		sb.append("				A.ST_CONT_NUM										\n");
		sb.append("			   ,A.ST_MAC_NUM										\n");
		sb.append("			   ,A.ST_MONTH											\n");
		sb.append("			   ,DATE_FORMAT(A.ST_DAY, '%Y-%m-%d') AS ST_DAY			\n");
		sb.append("			   ,A.ST_HOUR											\n");
		sb.append("			   ,A.ST_NUM_OF_ADS										\n");
		sb.append("			   ,A.ST_SP_YN											\n");
		sb.append("			   ,B.contents_title									\n");
		sb.append("			   ,D.advertiser_name									\n");
		sb.append("			   ,F.id												\n");
//		sb.append("			   ,COUNT(A.ST_CONT_NUM) AS CNT							\n");
		sb.append("  FROM															\n");
		sb.append("  	  tb_statistics A 											\n");
		sb.append("  	 ,tb_contents 	B 											\n");
		sb.append("  	 ,tb_machine 	C 											\n");
		sb.append("  	 ,tb_advertiser D											\n");
		sb.append("  	 ,tb_member     F 											\n");
		sb.append( "WHERE 															\n");
		sb.append("  	  A.ST_CONT_NUM = B.contents_num							\n");
		sb.append("  AND  A.ST_MAC_NUM  = C.machine_num								\n");
		sb.append("  AND  B.advertiser_num = D.advertiser_num						\n");
		sb.append("  AND  B.member_id = F.id										\n");
		sb.append("  AND  C.partner = F.id											\n");
		
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try 
		{
			con = ds.getConnection();
			stmt = con.prepareStatement(sb.toString());
//			stmt.setString(1, id);
			System.out.println("getStatisticsDayListJson: \n"+sb.toString());
			
			rs = stmt.executeQuery();
			
			while(rs.next()) 
			{
				Map<String, Object> ad = new HashMap<String, Object>();
//				System.out.println("rs.getInt(\"ST_CONT_NUM\")1:"+rs.getInt("ST_CONT_NUM"));
				ad.put("CONT_NUM", 					rs.getInt("ST_CONT_NUM"));
				ad.put("MAC_NUM", 					rs.getString("ST_MAC_NUM"));
				ad.put("MONTH",						rs.getInt("ST_MONTH"));
				ad.put("DAY", 						rs.getString("ST_DAY"));
				ad.put("HOUR", 						rs.getString("ST_HOUR"));
				ad.put("ADS_CNT", 					rs.getInt("ST_NUM_OF_ADS"));
				ad.put("SP_YN", 					rs.getString("ST_SP_YN"));
				ad.put("C_TITLE", 					rs.getString("contents_title"));
				ad.put("ADT_NM", 					rs.getString("advertiser_name"));
				ad.put("ID", 						rs.getString("id"));
				
				++cnt;
				
				list.add(ad);	
				
				if(list !=null && list.size()>0) 
				{	
					if(list.size() == 24)
					{
						JSONArray jsArray = new JSONArray();
						JSONObject json2 = new JSONObject();
						
						//대괄호로 묶음
						json2.put("stList2", list);
						
						jsArray.add(json2);
						
						//stList 로 매칭
						json1.put("stList", jsArray);
						
						//list 초기화
						list.clear();
						
						System.out.println("json1:"+json1.get("stList").toString());
						System.out.println("누눈나납");
					}
					
					System.out.println("cnt:"+cnt);
					
					if( cnt== 48 ) 
					{
						bodyArray.add(json1);
						result.put("body", bodyArray);
						System.out.println("result:"+result.toString());
					}
					
					/*
					//1뻔재 무조건 처리
					if( 	(int)list.get(0).get("CONT_NUM")!= (int)rs.getInt("ST_CONT_NUM")  
							 																	  )
					{
						list.remove(ad);
					}
					//2번째
					else if
				    ( (int)list.get(list.size()-1).get("CONT_NUM") != (int)rs.getInt("ST_CONT_NUM")) 
					{
						System.out.println("rs.getInt(\"ST_CONT_NUM\")2:"+rs.getInt("ST_CONT_NUM"));
						JSONArray jsArray = new JSONArray();
						//마지막 열 제거, 이전 번호가 같았던 list 데이터만 유지
						list.remove(ad);
						//대괄호로 묶음
						jsArray.add(list);
						//stList 로 매칭
						json1.put("stList", jsArray);
					}
					*/
				}
			}
			
		} catch(Exception e) {
			e.printStackTrace();
		
		} finally {
			close(rs);
			close(stmt);
			close(con);
		}
		
		return result;
	}
	
	/**
	 * Json parsing
	 * 
	 * @author	이영상
	 * @since		2020.08.19
	 * @version	1.0
	 * 
	 * <pre>
	 * << 개정이력 >>
	 * ------------------------------------------------------
	 * 수정일				수정자				수정내용
	 * ------------------------------------------------------
	 * 08.19			이영상				최초생성
	 */
	public int jsonInsert() 
	{
		int result = 0;
		
		StringBuffer sb = new StringBuffer();
		
		Connection con = null;
		PreparedStatement stmt = null;
		
		/*//마카노차야 데이터
		String jsonData = "{\"RSP_WORD\":\"RSP DAILY STATISTICS LIST\",\"BODY\":"
				+"[{\"MAC_NUM\":\"2020-01-13-002\",\"CONT_NUM\":\"1\","
				+"\"RSP STT LIST\":"
					 +"[{\"HOUR\":\"00\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"3\",\"SP_YN\":\"N\"},"  
					 +"{\"HOUR\":\"01\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"3\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"02\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"2\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"03\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"2\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"04\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"3\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"05\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"06\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"07\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"08\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"09\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"10\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"11\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"12\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"13\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"5\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"14\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"15\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"16\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"17\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"18\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"5\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"19\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"20\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"21\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"22\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"23\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"}]"
//					 +"{\"HOUR\":\"24\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"}]"
				+"}"
		*/		
			//emart 데이터
		String jsonData = "{\"RSP_WORD\":\"RSP DAILY STATISTICS LIST\",\"BODY\":"
				+"[{\"MAC_NUM\":\"2020-01-13-003\",\"CONT_NUM\":\"30\","
				+"\"RSP STT LIST\":"
					 +"[{\"HOUR\":\"00\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"},"  
					 +"{\"HOUR\":\"01\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"4\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"02\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"5\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"03\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"2\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"04\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"3\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"05\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"6\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"06\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"6\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"07\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"8\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"08\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"10\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"09\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"13\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"10\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"15\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"11\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"15\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"12\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"16\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"13\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"8\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"14\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"13\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"15\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"14\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"16\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"5\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"17\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"3\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"18\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"3\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"19\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"18\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"20\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"19\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"21\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"6\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"22\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"2\",\"SP_YN\":\"N\"},"
					 +"{\"HOUR\":\"23\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"2\",\"SP_YN\":\"N\"}]"
//					 +"{\"HOUR\":\"24\",\"DAY\":\"2020-08-19\",\"MONTH\":\"08\",\"NUM_OF_ADS\":\"0\",\"SP_YN\":\"N\"}]"
				+"}"		
				
			+ "]}";
		JSONParser jsonParser = new JSONParser();
		JSONObject jsonObject;
		
		
		try 
		{
			
			con = ds.getConnection();
//			stmt = con.prepareStatement(sb.toString());
//			stmt.setString(1, id);
			
			jsonObject = (JSONObject)jsonParser.parse(jsonData);
			//System.out.println(jsonObject);
			
			String rspWord = (String)jsonObject.get("RSP_WORD");
			JSONArray bodyArray = (JSONArray)jsonObject.get("BODY");
			//System.out.println("rspWord:"+rspWord);
			//System.out.println("bodyArray:"+bodyArray);
			
			List<String> jsonDataList = new ArrayList<String>(); 
			
			System.out.println("bodySize:"+bodyArray.size());
			
			
			for(int i=0; i< bodyArray.size(); i++) 
			{
				JSONObject jsList = (JSONObject)bodyArray.get(i);
				
				String macNum  = (String)jsList.get("MAC_NUM");
				String contNum = (String)jsList.get("CONT_NUM");
				
				System.out.println("{macNum:"+macNum +" "+i+"번째");
				System.out.println("contNum:"+contNum+" " +i+"번째}");

				JSONArray timeList = (JSONArray)jsList.get("RSP STT LIST");
				
				System.out.println("timeListSize:"+timeList.size());
				
				for(int a =0; a< timeList.size(); a++)  
				{
					JSONObject timeListVal = (JSONObject)timeList.get(a);
					String hour   = (String)timeListVal.get("HOUR");
					String day    = (String)timeListVal.get("DAY");
					String month  = (String)timeListVal.get("MONTH");
					String adsNum = (String)timeListVal.get("NUM_OF_ADS");
					String spYn   = (String)timeListVal.get("SP_YN");
					
					System.out.println("{");
					System.out.println("hour:"+hour+" "+i+"번째"+" "+a+"열");
					System.out.println("day:"+day+" "+i+"번째"+" "+a+"열");
					System.out.println("month:"+month+" "+i+"번째"+" "+a+"열");
					System.out.println("adsNum:"+adsNum+" "+i+"번째"+" "+a+"열");
					System.out.println("spYn:"+spYn+" "+i+"번째"+" "+a+"열");
					System.out.println("}");
				
					sb.append("INSERT INTO tb_statistics						\n");
					sb.append("(												\n");
					sb.append("					ST_NUM							\n");
					sb.append("				   ,ST_CONT_NUM						\n");
					sb.append("				   ,ST_MAC_NUM						\n");
					sb.append("				   ,ST_MONTH						\n");
					sb.append("				   ,ST_DAY							\n");
					sb.append("				   ,ST_HOUR							\n");
					sb.append("				   ,ST_NUM_OF_ADS					\n");
					sb.append("				   ,ST_SP_YN						\n");
					sb.append(")												\n");
					sb.append("	VALUES											\n");
					sb.append("(												\n");
					sb.append("		(SELECT  									\n");
					sb.append("			 	IFNULL(MAX(ST_NUM),0)+1 			\n");
					sb.append("		 FROM tb_statistics	A)						\n");
					sb.append("				   ,?								\n");
					sb.append("				   ,?								\n");
					sb.append("				   ,?								\n");
					sb.append("				   ,DATE_FORMAT(?,'%Y%m%d')			\n");
					sb.append("				   ,?								\n");
					sb.append("				   ,?								\n");
					sb.append("				   ,?								\n");
					sb.append(")												\n");
					
					stmt = con.prepareStatement(sb.toString());
					stmt.setString(1, contNum);		//컨텐츠번호
					stmt.setString(2, macNum);		//머신번호
					stmt.setString(3, month);		//월
					stmt.setString(4, day);
					stmt.setString(5, hour);
					stmt.setString(6, adsNum);
					stmt.setString(7, spYn);
					
					result += stmt.executeUpdate();
					
					stmt.clearParameters();
					sb.setLength(0);
				}
			}
			
			System.out.println("Update 성공횟수:"+result);
			
		} 
		catch(Exception e) 
		{
			e.printStackTrace();
		
		} 
		finally 
		{
			close(stmt);
			close(con);
		}
		
		return result;
	}
	
	
	/**
	 * 통계 메뉴 광고주 select 태그목록
	 * 
	 * @author	이영상
	 * @since		2020.08.24
	 * @version	1.0
	 * 
	 * <pre>
	 * << 개정이력 >>
	 * ------------------------------------------------------
	 * 수정일				수정자				수정내용
	 * ------------------------------------------------------
	 * 08.24			이영상				최초생성
	 */
	
	public ArrayList<Map<String, Object>> getSelectADTList(String id) 
	{
		ArrayList<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		
		StringBuffer sb = new StringBuffer();
		
		sb.append("SELECT															\n");
		sb.append("		  		advertiser_num										\n");
		sb.append("			   ,advertiser_name										\n");
		sb.append("  FROM															\n");
		sb.append("  	  tb_advertiser 											\n");
		sb.append( "WHERE 															\n");
		sb.append("  	  member_id	= 	 ?											\n");
		
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try 
		{
			con = ds.getConnection();
			stmt = con.prepareStatement(sb.toString());
			stmt.setString(1, id);
			System.out.println("getSelectADTList: \n"+sb.toString());
			
			rs = stmt.executeQuery();
			
			while(rs.next()) 
			{
				Map<String, Object> ad = new HashMap<String, Object>();
				ad.put("ADT_NUM", 					rs.getInt("advertiser_num"));
				ad.put("ADT_NM", 					rs.getString("advertiser_name"));
				
				list.add(ad);
			}
			
		} catch(Exception e) {
			e.printStackTrace();
		
		} finally {
			close(rs);
			close(stmt);
			close(con);
		}
		return list;
	}
	
	/**
	 * 월별 통계 그래프 
	 * 
	 * @author	이영상
	 * @since		2020.08.24
	 * @version	1.0
	 * 
	 * <pre>
	 * << 개정이력 >>
	 * ------------------------------------------------------
	 * 수정일				수정자				수정내용
	 * ------------------------------------------------------
	 * 08.24			이영상				최초생성
	 */
	public ArrayList<Map<String, Object>> getStatisticsMonthList(String id) 
	{
		ArrayList<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		
		StringBuffer sb = new StringBuffer();
		
		sb.append("SELECT															\n");
		sb.append("				SUM(A.ST_NUM_OF_ADS) AS ADS_SUM						\n");
		sb.append("			   ,A.ST_MONTH											\n");
		sb.append("			   ,DATE_FORMAT(A.ST_DAY, '%Y-%m-%d') AS ST_DAY			\n");
		sb.append("			   ,B.contents_title									\n");
		sb.append("			   ,D.advertiser_name									\n");
		sb.append("			   ,F.id												\n");
		sb.append("  FROM															\n");
		sb.append("  	  tb_statistics A 											\n");
		sb.append("  	 ,tb_contents 	B 											\n");
		sb.append("  	 ,tb_machine 	C 											\n");
		sb.append("  	 ,tb_advertiser D											\n");
		sb.append("  	 ,tb_member     F 											\n");
		sb.append( "WHERE 															\n");
		sb.append("  	  A.ST_CONT_NUM = B.contents_num							\n");
		sb.append("  AND  A.ST_MAC_NUM  = C.machine_num								\n");
		sb.append("  AND  B.advertiser_num = D.advertiser_num						\n");
		sb.append("  AND  B.member_id = F.id										\n");
		sb.append("  AND  C.partner = F.id											\n");
		sb.append("  GROUP BY ST_DAY,ST_CONT_NUM									\n");
		
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try 
		{
			con = ds.getConnection();
			stmt = con.prepareStatement(sb.toString());
//			stmt.setString(1, id);
			System.out.println("getStatisticsMonthList: \n"+sb.toString());
			
			rs = stmt.executeQuery();
			
			while(rs.next()) 
			{
				Map<String, Object> ad = new HashMap<String, Object>();
				ad.put("ADS_SUM", 					rs.getInt("ADS_SUM"));
				ad.put("MONTH",						rs.getInt("ST_MONTH"));
				ad.put("DAY", 						rs.getString("ST_DAY"));
				ad.put("C_TITLE", 					rs.getString("contents_title"));
				ad.put("ADT_NM", 					rs.getString("advertiser_name"));
				ad.put("ID", 						rs.getString("id"));
				
				list.add(ad);
			}
			
		} catch(Exception e) {
			e.printStackTrace();
		
		} finally {
			close(rs);
			close(stmt);
			close(con);
		}
		return list;
	}
	
	
	
	
	
	
}